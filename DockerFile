pipeline {
    agent any

    environment {
        APP_NAME = "GuessingGameAppDocker"
        WAR_FILE = "target/GuessingGameAppDocker.war"
        DOCKER_IMAGE = "guessinggameapp-docker:latest"   // fixed: removed '+' to avoid Docker tag issue
        APP_URL = "http://4.234.85.9:8080"
        SONARQUBE = "SonarQube"
    }

    tools {
        jdk 'java17'
        maven 'maven3'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main', url: 'https://github.com/Amuzie001/NumberGuessGame.git'
            }
        }

        stage('Build') {
            steps {
                echo 'Building project with Maven...'
                sh 'mvn clean package'
            }
        }

        stage('Test') {
            steps {
                echo 'Running unit tests...'
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv("${SONARQUBE}") {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            mvn sonar:sonar \
                                -Dsonar.projectKey=GuessingGameAppDocker \
                                -Dsonar.token=$Key
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo 'Waiting for SonarQube Quality Gate...'
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Docker Run') {
            steps {
                script {
                    echo 'Deploying Docker container...'
                    sh "docker rm -f ${APP_NAME} || true"
                    sh "docker run -d --name ${APP_NAME} -p 8080:8080 ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    try {
                        sh "curl -s ${APP_URL} | grep 'Welcome'"
                        echo 'Deployment verified successfully!'
                    } catch (Exception e) {
                        error 'Deployment verification failed!'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs!'
        }
        always {
            echo 'Cleaning up workspace...'
            cleanWs()   // requires Workspace Cleanup plugin
        }
    }
}
